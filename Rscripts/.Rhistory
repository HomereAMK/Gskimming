### The BEGINNING ~~~~
##
# ~ Plots FST heatmap from fst calculator module | By Eduardo Charvel  and  Homère J. Alves Monteiro
# Cleans the environment ~
rm(list=ls())
#install.package("pacman")
# Loads required packages ~
pacman::p_load(pheatmap, tidyverse, reshape2)
# Loads Fst table ~
data <- read.table("/Users/sjr729/Desktop/GitHub/Skmer-2/ed_test_wcfst.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE,)
#Remove the redundant first column, but the scalability of this need to be checked
# Melt the Fst data frame to long format
melted_Fst <- melt(data, id.vars = "sample", variable.name = "SRR_pair", value.name = "Fst")
#melted_Fst <- melted_Fst[melted_Fst$sample != melted_Fst$SRR_pair, ]
#Replace NAs by 0
#melted_Fst$Fst <- ifelse(is.na(melted_Fst$Fst), 0, melted_Fst$Fst)
# Adds column names ~
colnames(melted_Fst) <- c("Pop1", "Pop2", "Weighted")
# Melts datasets ~
Fst_Pops = union(melted_Fst$Pop1, melted_Fst$Pop2)
n = length(Fst_Pops)
n
# Creates Fst-Fst matrix ~
Fst_Fst <- matrix(0, nrow = n, ncol = n, dimnames = list(Fst_Pops, Fst_Pops))
for (i in 1:nrow(melted_Fst)) {
Fst_Fst[melted_Fst[i, "Pop1"], melted_Fst[i, "Pop2"]] = melted_Fst[i, "Weighted"]
Fst_Fst[melted_Fst[i, "Pop2"], melted_Fst[i, "Pop1"]] = melted_Fst[i, "Weighted"]}
Fst_Fst
# Gets Fst midpoint ~
Pops <- which(upper.tri(Fst_Fst), arr.ind = TRUE)
Fst_df <- data.frame(Site1 = dimnames(Fst_Fst)[[2]][Pops[, 2]],
Site2 = dimnames(Fst_Fst)[[1]][Pops[, 1]],
Value = Fst_Fst[Pops] %>% round(digits = 6))
Fstmiddle = max(Fst_df$Value) / 2
Fst_df
# Gets Fst label ~
Fst.label = expression(italic("F")[ST])
str(melted_Fst)
#Convert Pop2 to a character variable and reorder its levels to match the order of levels in Pop1.
melted_Fst$Pop2 <- factor(melted_Fst$Pop2, levels = levels(factor(melted_Fst$Pop1)))
Fst_Plot <- ggplot(data = melted_Fst, aes(x = Pop1, y = Pop2, fill = Weighted)) +
geom_tile(color = "#ffffff", lwd = 1.5, linetype = 1, width = 1, height = 1) +
coord_fixed() +
geom_text(aes(label = round(Weighted, digits = 3)), color = "#ffffff", size = 2) +
scale_fill_gradientn(colors = c("#fde0dd", "#e46e2a", "#481a03"),
name = "Weighted Fst",
limits = c(0, 1)) +
scale_x_discrete(labels = Pop1) +
scale_y_discrete(labels = Pop2, expand = c(0, 0), position = "right") +
labs(x = "Population 1", y = "Population 2",
title = "Fst Values between Populations",
fill = "Fst") +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = margin(t = 0.005, b = 0.005, r = .4, l = .4, unit = "cm"),
axis.line = element_blank(),
axis.text = element_text(colour = "#000000", size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.ticks = element_line(color = "#000000", size = .3),
legend.position = "right",
legend.key = element_rect(fill = NA),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 12, face = "bold"))
ggplot(data = melted_Fst, aes(x = Pop1, y = Pop2, fill = Weighted)) +
geom_tile(color = "#ffffff", lwd = 1.5, linetype = 1, width = 1, height = 1) +
coord_fixed() +
geom_text(aes(label = round(Weighted, digits = 3)), color = "#ffffff", size = 2) +
scale_fill_gradientn(colors = c("#fde0dd", "#e46e2a", "#481a03"),
name = "Weighted Fst",
limits = c(0, 1))
### The BEGINNING ~~~~~
##
# ~ Plots --MAP ala N.Lou| First written by Nicolas Lou with later modifications by Homère J. Alves Monteiro
rm(list = ls(all = TRUE))
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, sf, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")
library(rgdal)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-3.tar.gz", type="source")
library(rgdal)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.5-32.tar.gz", type="source")
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, sf, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")
##
# ~ Plots --MAP ala N.Lou| First written by Nicolas Lou with later modifications by Homère J. Alves Monteiro
rm(list = ls(all = TRUE))
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, sf, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")
library(rgdal)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-5.tar.gz", type="source")
library(rgdal)
install.packages("rgdal")
install.packages("rgdal",type="source"))
install.packages("rgdal",type="source")
library(rgdal)
### The BEGINNING ~~~~~
##
# ~ Plot a PCoa/MDS with jc distance matrix from skmer -distance | from Homère J. Alves Monteiro and Eduardo Charvel
# ~ also Plot a PCoa/MDS with .ibs matrix from angsd -doIBS | from Homère J. Alves Monteiro and Eduardo Charvel
# R 4.3.2 GUI 1.80 Big Sur ARM build (8281)
### Clearing environment and setting working directory
rm(list = ls(all = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### Loading necessary packages
library(tidyverse)
library(dplyr)
library(ape)
library(cowplot)
library(knitr)
library(scales)
library(miscTools)
if (!requireNamespace("dbscan", quietly = TRUE)) install.packages("dbscan")
if (!requireNamespace("mclust", quietly = TRUE)) install.packages("mclust")
library(dbscan)
library(mclust)
### Sourcing required functions
source("individual_mdsGskim_functions_hjam.R")
### Reading and processing distance matrix
dist_jc <- read_tsv("../../Skmer-2/data/Clupea_4x_24feb24/jc-24.02-dist-mat_4x_Clupea.txt", col_names = FALSE) %>%
dplyr::select(1:nrow(.)) %>%
as.matrix()
pairwise_distances <- dist_jc[-1, -1]
ibs_mat <- as.data.frame(as.matrix(pairwise_distances))
ibs_mat[is.na(ibs_mat) | ibs_mat == "nan"] <- 0
ibs_mat[is.na(ibs_mat) | ibs_mat == "-nan"] <- 0
str(ibs_mat)
### Creating annotation file
sample_ids <- dist_jc[-1, 1]
cleaned_ids <- gsub("unclassified-kra_", "", sample_ids)
cleaned_ids <- gsub("_", "", cleaned_ids)
species_names <- rep("Clupea", length(sample_ids))
### If you already have an tailored annotation file
#annot_ed <- read_tsv(file = "../../Skmer-2/with_fam_nas/geno_fam_annotation.tsv" )
annotation_df <- data.frame(sample_id = sample_ids, cleaned_id = cleaned_ids, species = species_names)
#write.csv(annotation_df, "../../Skmer-2/data/ClupeaAtmore3feb/03.02-dist-mat_annot.csv", row.names = FALSE)
### Link the master list to retrieve supplementary info
master_list<- read_csv("~/Desktop/GitHub/Gskimming/Metadata/ClupeaAtmore/Master_list_ClupeaAtmore.csv")
annot_df_final <- merge(annotation_df, master_list, by.x = "cleaned_id", by.y = "run_accession", all.x = TRUE)
### identify run_accession that are  not present in annot_df_final
missing_ind <- master_list %>%
filter(!run_accession %in% annot_df_final$cleaned_id)
for (accession in missing_ind$run_accession) {
cat(accession, "\n")
}
# Renaming the columns
annot_modern<- merge(annotation_df, annot_df_final, by = "cleaned_id")
#write.csv(annot_modern, "../../Gskimming/01_infofiles/ClupeaAtmore/ClupeaModern_annot.csv", row.names = FALSE)
fst_annot <- annot_modern %>% dplyr::select(sample_id.x, population)
colnames(fst_annot) <- c("genome", "family")
# fst_annot$family <- gsub(",", "", fst_annot$family) # Replace commas with underscores
# fst_annot$family <- gsub(" ", "", fst_annot$family)  # Remove spaces
fst_annot$genome
# Writing the data frame to a TSV file
#write.table(fst_annot, "~/Desktop/GitHub/Gskimming/01_infofiles/Fst/Skmer/jc-24.02-dist-mat_4x_Clupea_Fstannot.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
### Performing PCoA with initial annotation
mds_plot <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$population,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
mds_plot
ggsave(mds_plot, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_locality_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
# Function to find outliers
find_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25)
Q3 <- quantile(df[[column]], 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- df[df[[column]] < lower_bound | df[[column]] > upper_bound, ]
return(outliers)
}
# Applying the function to each dist_ column
outliers_dist_1 <- find_outliers(pcoa_table, 'dist_1')
outliers_dist_2 <- find_outliers(pcoa_table, 'dist_2')
outliers_dist_3 <- find_outliers(pcoa_table, 'dist_3')
View(outliers_dist_2)
View(outliers_dist_3)
### Performing PCoA with updated annotation and type information
PCoA(ibs_mat, annotation_df$cleaned_id, annotation_df$type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
### Performing PCoA with updated annotation and type information
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$tissue_type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
### Performing PCoA with updated annotation and type information
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$sample_description, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
ggsave(mds_plot, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_tissue_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
### Performing PCoA with updated annotation and type information
mds_type <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
ggsave(mds_type, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_tissue_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
### Performing PCoA with updated annotation and type information
mds_type <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
### The BEGINNING ~~~~~
##
# ~ Plot a PCoa/MDS with jc distance matrix from skmer -distance | from Homère J. Alves Monteiro and Eduardo Charvel
# ~ also Plot a PCoa/MDS with .ibs matrix from angsd -doIBS | from Homère J. Alves Monteiro and Eduardo Charvel
# R 4.3.2 GUI 1.80 Big Sur ARM build (8281)
### Clearing environment and setting working directory
rm(list = ls(all = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### Loading necessary packages
library(tidyverse)
library(dplyr)
library(ape)
library(cowplot)
library(knitr)
library(scales)
library(miscTools)
if (!requireNamespace("dbscan", quietly = TRUE)) install.packages("dbscan")
if (!requireNamespace("mclust", quietly = TRUE)) install.packages("mclust")
library(dbscan)
library(mclust)
### Sourcing required functions
source("individual_mdsGskim_functions_hjam.R")
### Reading and processing distance matrix
dist_jc <- read_tsv("../../Skmer-2/data/Clupea_4x_24feb24/jc-24.02-dist-mat_4x_Clupea.txt", col_names = FALSE) %>%
dplyr::select(1:nrow(.)) %>%
as.matrix()
pairwise_distances <- dist_jc[-1, -1]
ibs_mat <- as.data.frame(as.matrix(pairwise_distances))
ibs_mat[is.na(ibs_mat) | ibs_mat == "nan"] <- 0
ibs_mat[is.na(ibs_mat) | ibs_mat == "-nan"] <- 0
str(ibs_mat)
### Creating annotation file
sample_ids <- dist_jc[-1, 1]
cleaned_ids <- gsub("unclassified-kra_", "", sample_ids)
cleaned_ids <- gsub("_", "", cleaned_ids)
species_names <- rep("Clupea", length(sample_ids))
### If you already have an tailored annotation file
#annot_ed <- read_tsv(file = "../../Skmer-2/with_fam_nas/geno_fam_annotation.tsv" )
annotation_df <- data.frame(sample_id = sample_ids, cleaned_id = cleaned_ids, species = species_names)
#write.csv(annotation_df, "../../Skmer-2/data/ClupeaAtmore3feb/03.02-dist-mat_annot.csv", row.names = FALSE)
### Link the master list to retrieve supplementary info
master_list<- read_csv("~/Desktop/GitHub/Gskimming/Metadata/ClupeaAtmore/Master_list_ClupeaAtmore.csv")
annot_df_final <- merge(annotation_df, master_list, by.x = "cleaned_id", by.y = "run_accession", all.x = TRUE)
### identify run_accession that are  not present in annot_df_final
missing_ind <- master_list %>%
filter(!run_accession %in% annot_df_final$cleaned_id)
for (accession in missing_ind$run_accession) {
cat(accession, "\n")
}
# Renaming the columns
annot_modern<- merge(annotation_df, annot_df_final, by = "cleaned_id")
#write.csv(annot_modern, "../../Gskimming/01_infofiles/ClupeaAtmore/ClupeaModern_annot.csv", row.names = FALSE)
fst_annot <- annot_modern %>% dplyr::select(sample_id.x, population)
colnames(fst_annot) <- c("genome", "family")
# fst_annot$family <- gsub(",", "", fst_annot$family) # Replace commas with underscores
# fst_annot$family <- gsub(" ", "", fst_annot$family)  # Remove spaces
fst_annot$genome
# Writing the data frame to a TSV file
#write.table(fst_annot, "~/Desktop/GitHub/Gskimming/01_infofiles/Fst/Skmer/jc-24.02-dist-mat_4x_Clupea_Fstannot.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
### Performing PCoA with initial annotation
mds_plot <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$population,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
mds_plot
ggsave(mds_plot, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_locality_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
### Performing PCoA with updated annotation and type information
mds_type <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
### Performing PCoA with updated annotation and type information
mds_type <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$tissue_type, 3, 1, 2, show.ellipse = TRUE, show.label = FALSE)
ggsave(mds_type, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_tissue_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
mds_plot_ecot <- PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$sample_description,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
ggsave(mds_plot_ecot, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_ecotype_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
### Reading skims stats file
stat_clupea <- read_tsv("../01_infofiles/ClupeaAtmore/Stats/stats-postprocess_03.02.csv", col_names = FALSE)
str(stat_clupea)
stat_clupea_df <- stat_clupea %>%
pivot_wider(names_from = X2, values_from = X3) %>%
rename(
coverage = `coverage`,
genome_length = `genome_length`,
read_length = `read_length`,
error_rate = `error_rate`
)%>%
mutate(X1 = str_extract(X1, "[^/]+$")) %>%
mutate(X1 = gsub("unclassified-kra_", "",X1))%>%
mutate(X1 = gsub("_", "",X1))
stat_clupea_df
annotation_df_tot <- merge(annotation_df, stat_clupea_df, by.x = "cleaned_id", by.y = "X1")
annotation_df_tot
View(annot_df_final)
annotation_df_tot <- merge(annot_df_final, stat_clupea_df, by.x = "cleaned_id", by.y = "X1")
View(annotation_df_tot)
# Range of coverage by adding CoverageCategory ~
annotation_df_tot$CoverageCategory <- ifelse(annotation_df_tot$coverage <= 0.7, "< 1x",
ifelse(annotation_df_tot$coverage <= 2, "< 2x",
ifelse(annotation_df_tot$coverage <= 5, "< 5x",
ifelse(annotation_df_tot$coverage <= 10, "< 10x",
ifelse(annotation_df_tot$coverage <= 20, "< 20x",
ifelse(annotation_df_tot$coverage <= 30, "< 30x",
ifelse(annotation_df_tot$coverage <= 50, "< 50x", "Above 50x")))))))
annotation_df_tot$error_rateCategory <- ifelse(annotation_df_tot$error_rate <= 0.005, "< 0.5%",
ifelse(annotation_df_tot$error_rate <= 0.01, "< 1%",
ifelse(annotation_df_tot$error_rate <= 0.05, "< 5%", "error rate dangerously high")))
###
PCoA2(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$CoverageCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
###
PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$CoverageCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$error_rateCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
View(annotation_df_tot)
PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$genome_length, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
range(annotation_df_tot$genome_length)
1381369898 - 605388753
annotation_df_tot$genome_length
# Calculate quantiles for genome length to determine the range for each category
quantiles <- quantile(annotation_df_tot$genome_length, probs=seq(0, 1, length.out=6))
# Use cut function to categorize genome lengths based on quantile ranges
genome_length_categories <- cut(genome_length, breaks=quantiles, include.lowest=TRUE)
# Use cut function to categorize genome lengths based on quantile ranges
genome_length_categories <- cut(annotation_df_tot$genome_length, breaks=quantiles, include.lowest=TRUE)
# Convert factor levels to numerical labels
levels(genome_length_categories) <- 1:5
genome_length_categories
quantiles
annotation_df_tot$genome_length <- ifelse(annotation_df_tot$genome_length <= 7e+08, "< 7e+08 bp",
ifelse(annotation_df_tot$genome_length <= 8e+08, "< 8e+08 bp",
ifelse(annotation_df_tot$genome_length <= 9e+08, "< 9e+08 bp",
ifelse(annotation_df_tot$genome_length <= 10e+08, "< 10e+08 bp", "genome length dangerously high"))))
### Reading skims stats file
stat_clupea <- read_tsv("../01_infofiles/ClupeaAtmore/Stats/stats-postprocess_03.02.csv", col_names = FALSE)
str(stat_clupea)
stat_clupea_df <- stat_clupea %>%
pivot_wider(names_from = X2, values_from = X3) %>%
rename(
coverage = `coverage`,
genome_length = `genome_length`,
read_length = `read_length`,
error_rate = `error_rate`
)%>%
mutate(X1 = str_extract(X1, "[^/]+$")) %>%
mutate(X1 = gsub("unclassified-kra_", "",X1))%>%
mutate(X1 = gsub("_", "",X1))
annotation_df_tot <- merge(annot_df_final, stat_clupea_df, by.x = "cleaned_id", by.y = "X1")
# Range of coverage by adding CoverageCategory ~
annotation_df_tot$CoverageCategory <- ifelse(annotation_df_tot$coverage <= 0.7, "< 1x",
ifelse(annotation_df_tot$coverage <= 2, "< 2x",
ifelse(annotation_df_tot$coverage <= 5, "< 5x",
ifelse(annotation_df_tot$coverage <= 10, "< 10x",
ifelse(annotation_df_tot$coverage <= 20, "< 20x",
ifelse(annotation_df_tot$coverage <= 30, "< 30x",
ifelse(annotation_df_tot$coverage <= 50, "< 50x", "Above 50x")))))))
annotation_df_tot$error_rateCategory <- ifelse(annotation_df_tot$error_rate <= 0.005, "< 0.5%",
ifelse(annotation_df_tot$error_rate <= 0.01, "< 1%",
ifelse(annotation_df_tot$error_rate <= 0.05, "< 5%", "error rate dangerously high")))
annotation_df_tot$genome_lengthCategory <- ifelse(annotation_df_tot$genome_length <= 7e+08, "< 7e+08 bp",
ifelse(annotation_df_tot$genome_length <= 8e+08, "< 8e+08 bp",
ifelse(annotation_df_tot$genome_length <= 9e+08, "< 9e+08 bp",
ifelse(annotation_df_tot$genome_length <= 10e+08, "< 10e+08 bp", "genome length dangerously high"))))
PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$genome_lengthCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
mds_errate <- PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$error_rateCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
ggsave(mds_errate, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_errorrate_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
mds_geno <- PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$genome_lengthCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
ggsave(mds_geno, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_genomelength_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
annotation_df_tot$error_rateCategory <- ifelse(annotation_df_tot$error_rate <= 0.005, "< 0.5%",
ifelse(annotation_df_tot$error_rate <= 0.01, "< 1%",
ifelse(annotation_df_tot$error_rate <= 0.05, "< 5%", "error rate dangerously high")))
mds_errate <- PCoA(ibs_mat, annotation_df_tot$cleaned_id, annotation_df_tot$error_rateCategory, 3, 1, 2, show.ellipse = FALSE, show.label = FALSE)
mds_errate
ggsave(mds_errate, file = "~/Desktop/GitHub/Gskimming/02_figures/ClupeaAtmore/4x/Skmer/4x_ClupeaPCA_n45_errorrate_JCcorr_Skmer_rawcoverage_PC1PC2.png",scale = 1, dpi = 600)
