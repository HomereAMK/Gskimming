### The BEGINNING ~~~~
##
# ~ Plots FST heatmap from fst calculator module | By Eduardo Charvel  and  Homère J. Alves Monteiro
# Cleans the environment ~
rm(list=ls())
#install.package("pacman")
# Loads required packages ~
pacman::p_load(pheatmap, tidyverse, reshape2)
# Loads Fst table ~
data <- read.table("/Users/sjr729/Desktop/GitHub/Skmer-2/ed_test_wcfst.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE,)
#Remove the redundant first column, but the scalability of this need to be checked
# Melt the Fst data frame to long format
melted_Fst <- melt(data, id.vars = "sample", variable.name = "SRR_pair", value.name = "Fst")
#melted_Fst <- melted_Fst[melted_Fst$sample != melted_Fst$SRR_pair, ]
#Replace NAs by 0
#melted_Fst$Fst <- ifelse(is.na(melted_Fst$Fst), 0, melted_Fst$Fst)
# Adds column names ~
colnames(melted_Fst) <- c("Pop1", "Pop2", "Weighted")
# Melts datasets ~
Fst_Pops = union(melted_Fst$Pop1, melted_Fst$Pop2)
n = length(Fst_Pops)
n
# Creates Fst-Fst matrix ~
Fst_Fst <- matrix(0, nrow = n, ncol = n, dimnames = list(Fst_Pops, Fst_Pops))
for (i in 1:nrow(melted_Fst)) {
Fst_Fst[melted_Fst[i, "Pop1"], melted_Fst[i, "Pop2"]] = melted_Fst[i, "Weighted"]
Fst_Fst[melted_Fst[i, "Pop2"], melted_Fst[i, "Pop1"]] = melted_Fst[i, "Weighted"]}
Fst_Fst
# Gets Fst midpoint ~
Pops <- which(upper.tri(Fst_Fst), arr.ind = TRUE)
Fst_df <- data.frame(Site1 = dimnames(Fst_Fst)[[2]][Pops[, 2]],
Site2 = dimnames(Fst_Fst)[[1]][Pops[, 1]],
Value = Fst_Fst[Pops] %>% round(digits = 6))
Fstmiddle = max(Fst_df$Value) / 2
Fst_df
# Gets Fst label ~
Fst.label = expression(italic("F")[ST])
str(melted_Fst)
#Convert Pop2 to a character variable and reorder its levels to match the order of levels in Pop1.
melted_Fst$Pop2 <- factor(melted_Fst$Pop2, levels = levels(factor(melted_Fst$Pop1)))
Fst_Plot <- ggplot(data = melted_Fst, aes(x = Pop1, y = Pop2, fill = Weighted)) +
geom_tile(color = "#ffffff", lwd = 1.5, linetype = 1, width = 1, height = 1) +
coord_fixed() +
geom_text(aes(label = round(Weighted, digits = 3)), color = "#ffffff", size = 2) +
scale_fill_gradientn(colors = c("#fde0dd", "#e46e2a", "#481a03"),
name = "Weighted Fst",
limits = c(0, 1)) +
scale_x_discrete(labels = Pop1) +
scale_y_discrete(labels = Pop2, expand = c(0, 0), position = "right") +
labs(x = "Population 1", y = "Population 2",
title = "Fst Values between Populations",
fill = "Fst") +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = margin(t = 0.005, b = 0.005, r = .4, l = .4, unit = "cm"),
axis.line = element_blank(),
axis.text = element_text(colour = "#000000", size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.ticks = element_line(color = "#000000", size = .3),
legend.position = "right",
legend.key = element_rect(fill = NA),
legend.background = element_blank(),
legend.title = element_text(colour = "#000000", size = 12, face = "bold"),
legend.text = element_text(colour = "#000000", size = 12, face = "bold"))
ggplot(data = melted_Fst, aes(x = Pop1, y = Pop2, fill = Weighted)) +
geom_tile(color = "#ffffff", lwd = 1.5, linetype = 1, width = 1, height = 1) +
coord_fixed() +
geom_text(aes(label = round(Weighted, digits = 3)), color = "#ffffff", size = 2) +
scale_fill_gradientn(colors = c("#fde0dd", "#e46e2a", "#481a03"),
name = "Weighted Fst",
limits = c(0, 1))
### The BEGINNING ~~~~~
##
# ~ Plot a PCoa/MDS with jc distance matrix from skmer -distance | from Homère J. Alves Monteiro and Eduardo Charvel
# R 4.3.2 GUI 1.80 Big Sur ARM build (8281)
### Clearing environment and setting working directory
rm(list = ls(all = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### Loading necessary packages
library(tidyverse)
library(dplyr)
library(ape)
library(cowplot)
library(knitr)
library(scales)
library(miscTools)
### Sourcing required functions
source("individual_mdsGskim_functions_hjam.R")
### Reading and processing distance matrix
### Reading and processing distance matrix
dist_jc <- read_tsv("../../Skmer-2/data/Clupea_4x_24feb24/jc-24.02-dist-mat_4x_Clupea.txt", col_names = FALSE) %>%
dplyr::select(1:nrow(.)) %>%
as.matrix()
pairwise_distances <- dist_jc[-1, -1]
ibs_mat <- as.data.frame(as.matrix(pairwise_distances))
ibs_mat[is.na(ibs_mat) | ibs_mat == "nan"] <- 0
ibs_mat[is.na(ibs_mat) | ibs_mat == "-nan"] <- 0
str(ibs_mat)
### Creating annotation file
sample_ids <- dist_jc[-1, 1]
cleaned_ids <- gsub("unclassified-kra_", "", sample_ids)
cleaned_ids <- gsub("_", "", cleaned_ids)
species_names <- rep("Clupea", length(sample_ids))
annotation_df <- data.frame(sample_id = sample_ids, cleaned_id = cleaned_ids, species = species_names)
### Link the master list to retrieve supplementary info
master_list<- read_csv("~/Desktop/GitHub/Gskimming/Metadata/ClupeaAtmore/Master_list_ClupeaAtmore.csv")
annot_df_final <- merge(annotation_df, master_list, by.x = "cleaned_id", by.y = "run_accession", all.x = TRUE)
### identify run_accession that are  not present in annot_df_final
missing_ind <- master_list %>%
filter(!run_accession %in% annot_df_final$cleaned_id)
for (accession in missing_ind$run_accession) {
cat(accession, "\n")
}
# Renaming the columns
fst_annot <- merge(annotation_df, annot_df_final, by = "cleaned_id")
fst_annot <- fst_annot %>% dplyr::select(sample_id.x, population)
colnames(fst_annot) <- c("genome", "family")
fst_annot$genome
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$sample_description,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$cleaned_id,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$population,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$sample_description,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
pcoa_table_genome_wide <- pcoa_table
pcoa_table_genome_wide_joined <- pcoa_table_genome_wide %>%
dplyr::select(1:6) %>%
left_join(annot_df_final, by=c("individual"="cleaned_id", "population"="population"))
pcoa_table_genome_wide_joined %>%
ggplot(aes(x=dist_1, y=dist_2)) +
geom_point(data=dplyr::select(pcoa_table_genome_wide_joined, -population), size = 0.1, color="grey") +
geom_point(size=1, mapping = aes(color=population)) +
facet_wrap(~population) +
theme_cowplot() +
theme(axis.text = element_blank())
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$population,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
pcoa_table_genome_wide <- pcoa_table
pcoa_table_genome_wide_joined <- pcoa_table_genome_wide %>%
dplyr::select(1:6) %>%
left_join(annot_df_final, by=c("individual"="cleaned_id", "population"="population"))
pcoa_table_genome_wide_joined %>%
ggplot(aes(x=dist_1, y=dist_2)) +
geom_point(data=dplyr::select(pcoa_table_genome_wide_joined, -population), size = 0.1, color="grey") +
geom_point(size=1, mapping = aes(color=population)) +
facet_wrap(~population) +
theme_cowplot() +
theme(axis.text = element_blank())
if (!requireNamespace("dbscan", quietly = TRUE)) install.packages("dbscan")
if (!requireNamespace("mclust", quietly = TRUE)) install.packages("mclust")
library(dbscan)
library(mclust)
# Perform DBSCAN clustering for Skmer method
dbscan_skmer <- dbscan(ibs_mat, eps = 0.5, minPts = 10)  # Adjust eps and minPts as needed
ibs_mat
# Perform DBSCAN clustering for Skmer method
dbscan_skmer <- dbscan(ibs_mat, eps = 0.5, minPts = 10)  # Adjust eps and minPts as needed
# Perform DBSCAN clustering for Skmer method
str(ibs_mat)
#### Clustering evaluation ####
##Skmer
# Convert all columns in ibs_mat to numeric
ibs_mat_numeric <- data.frame(lapply(ibs_mat, function(x) as.numeric(as.character(x))))
# Check if the conversion was successful
str(ibs_mat_numeric)
# Now run DBSCAN on the numeric dataframe
dbscan_skmer <- dbscan(ibs_mat_numeric, eps = 0.5, minPts = 10)  # Adjust eps and minPts as needed
# Examine the clustering result
print(dbscan_skmer)
dbscan_skmer
View(pcoa_table)
#### Clustering evaluation ####
##Skmer
str(pcoa_table)
#### Clustering evaluation ####
##Skmer
str(pcoa_table)
# Step 2: Prepare your dataset
# Assuming 'pcoa_table' is already loaded in your R environment
# We'll focus on dist_1 and dist_2 for clustering
data <- pcoa_table[, c("dist_1", "dist_2")]
# Step 3: Apply the DBSCAN clustering algorithm
# You might need to adjust 'eps' and 'minPts' based on your data characteristics
dbscan_result <- dbscan(data, eps = 0.5, minPts = 2)
# Step 4: Determine the ground truth based on unique populations
ground_truth <- as.factor(pcoa_table$population)
# Step 5: Calculate the Adjusted Rand Index (ARI)
# Note: You need to convert clustering labels to a factor for ARI calculation
cluster_labels <- factor(dbscan_result$cluster)
ari_result <- adjustedRandIndex(cluster_labels, ground_truth)
# Print the ARI result
print(ari_result)
cluster_labels
dbscan_result
dbscan::kNNdistplot(data, k =  4)
dbscan::kNNdistplot(data, k =  9)
dbscan::kNNdistplot(data, k =  2)
ggplot(data, aes(x = x, y = y)) + geom_point()
ggplot(data, aes(x = dist_1, y = dist_2)) + geom_point()
pcoa_table_genome_wide_joined %>%
ggplot(aes(x=dist_1, y=dist_2)) +
geom_point(data=dplyr::select(pcoa_table_genome_wide_joined, -population), size = 0.1, color="grey") +
geom_point(size=1, mapping = aes(color=population)) +
facet_wrap(~population) +
theme_cowplot() +
theme(axis.text = element_blank())
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$sample_description,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
ibs_mat
### Performing PCoA with initial annotation
PCoA(ibs_mat, annot_df_final$cleaned_id, annot_df_final$population,4, 1, 2, show.ellipse = FALSE, show.label = TRUE)
View(pcoa_table)
ggplot(data, aes(x = dist_1, y = dist_2)) + geom_point()
str(pcoa_table)
#  We'll focus on dist_1 and dist_2 for clustering
data <- pcoa_table[, c("dist_1", "dist_2")]
ggplot(data, aes(x = dist_1, y = dist_2)) + geom_point()
dbscan::kNNdistplot(data, k =  2)
# Step 3: Apply the DBSCAN clustering algorithm
# adjust 'eps' and 'minPts'
dbscan_result <- dbscan(data, eps = 0.5, minPts = 2)
# Step 4: Determine the ground truth based on unique populations
ground_truth <- as.factor(pcoa_table$population)
# Step 5: Calculate the Adjusted Rand Index (ARI)
# Note: You need to convert clustering labels to a factor for ARI calculation
cluster_labels <- factor(dbscan_result$cluster)
ari_result <- adjustedRandIndex(cluster_labels, ground_truth)
# Print the ARI result
print(ari_result)
View(annot_df_final)
View(fst_annot)
# Renaming the columns
annot_modern<- merge(annotation_df, annot_df_final, by = "cleaned_id")
write.csv(annot_modern, "../../Gskimming/01_infofiles/ClupeaAtmore/ClupeaModern_annot.csv", row.names = FALSE)
annot_modern
### The BEGINNING ~~~~~
##
# ~ Plots --MAP ala N.Lou| First written by Nicolas Lou with later modifications by Homère J. Alves Monteiro
rm(list = ls(all = TRUE))
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
setwd(dir = “~/Desktop/Scripts/Map_ala_N.Lou/00_scripts/“)
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
setwd(dir = “~/Desktop/“)
setwd(dir = "~/Desktop/GitHub/Gskimming/")
# First download shape data in your working directory
#download.file(“http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_countries.zip”, “countries.zip”)
# Then unzip
#unzip(“countries.zip”)
pop_info <- read_csv("01_infofiles/ClupeaAtmore/ClupeaModern_annot.csv")%>%
# Reorders Population ~
pop_info$Tag <- factor(pop_info$Tag, ordered = T,
levels = c(“MOLU”, “ZECE”, “CRES”,
# First download shape data in your working directory
#download.file(“http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_countries.zip”, “countries.zip”)
# Then unzip
#unzip(“countries.zip”)
pop_info <- read_csv("01_infofiles/ClupeaAtmore/ClupeaModern_annot.csv")
p2 <- readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
p2 <- readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
p2 <- readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
layer = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries") %>%
fortify()
readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
layer = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries") %>%
fortify()
readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
layer = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries") %>%
fortify()
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
install.packages("rgdal")
install.packages("rgdal", dependencies=TRUE,repos='http://cran.rstudio.com/')
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")setwd(dir = "~/Desktop/GitHub/Gskimming/")
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
readOGR
readOGR(dsn = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp",
layer = "01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries") %>%
fortify()
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, sf, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
p2 <- st_read("01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp") %>%
# Convert sf object to data frame for ggplot, if needed
st_as_sf() %>%
# Filter based on latitude
filter(st_y(geometry) > 35, st_y(geometry) < 73) %>%
# Use st_coordinates to extract long and lat if needed
mutate(long = st_coordinates(.)[,1], lat = st_coordinates(.)[,2])
p2 <- st_read("01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp")
p2 <- st_read("01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp") %>%
# Convert sf object to data frame for ggplot, if needed
st_as_sf() %>%
st_read("01_infofiles/ClupeaAtmore/Map_shapefile/ne_10m_admin_0_countries.shp") %>%
# Convert sf object to data frame for ggplot, if needed
st_as_sf() %>%
# Filter based on latitude
filter(st_y(geometry) > 35, st_y(geometry) < 73)
# Loads required packages ~
pacman::p_load(devtools, tidyverse, ggrepel,geosphere, knitr, sf, rgdal, marmap, sdmpredictors, ggcorrplot, raster, gdistance, ade4, cowplot)
remotes::install_url("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", type="source")
library(rgdal)
